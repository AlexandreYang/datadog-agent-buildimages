# Use the Microsoft-provided .NET Runtime 4.8 image as the base image
# because installing it in the image with Chocolatey requires a reboot.

# There is a bug in the February 11, 2020 update that makes commands fail in
# docker containers (see: https://support.microsoft.com/en-us/help/4542617/you-might-encounter-issues-when-using-windows-server-containers-with-t)
# To avoid that, there are two solutions:
# - both the host and the container must have the February 11, 2020 update, or
# - neither the host and the container must have the February 11, 2020 update.
# Since our 1809 windows-docker host image does not have this update, we use a base
# container image that does not have this update either (thus the 20200114 tag).
# On the contrary, since our 1909 windows-docker host image does have this update,
# we use a base container image that does have this update.
# TODO: Once the 1809 windows-docker host image is updated, update the base container image.
ARG BASE_IMAGE=mcr.microsoft.com/dotnet/framework/runtime:4.8-20200114-windowsservercore-ltsc2019

FROM ${BASE_IMAGE}

SHELL ["powershell", "-Command"]

ARG WINDOWS_VERSION
ENV WINDOWS_VERSION=${WINDOWS_VERSION:-1809}

# Chocolatey package versions
ENV GIT_VERSION="2.26.2" \
    SEVENZIP_VERSION="19.0" \
    VS2017BUILDTOOLS_VERSION="15.9.23.0" \
    VCPYTHON27_VERSION="9.0.0.30729" \
    GO_VERSION="1.13.8" \
    RUBY_VERSION="2.4.3.1" \
    PYTHON_VERSION="2.7.17" \
    WIX_VERSION="3.11.2" \
    CMAKE_VERSION="3.17.2" \
    MSYS_VERSION="20190524.0.0.20191030" \
    EMBEDDED_PYTHON_2_VERSION="2.7.17" \
    EMBEDDED_PYTHON_3_VERSION="3.8.1" \
    CACERTS_HASH="ADF770DFD574A0D6026BFAA270CB6879B063957177A991D453FF1D302C02081F"

LABEL target_agent="Agent 6/7" \
      target_arch="x86" \
      windows_version=${WINDOWS_VERSION} \
      git_version=${GIT_VERSION} \
      sevenzip_version=${SEVENZIP_VERSION} \
      vs2017buildtools_version=${VS2017BUILDTOOLS_VERSION} \
      vcpython27_version=${VCPYTHON27_VERSION} \
      go_version=${GO_VERSION} \
      ruby_version=${RUBY_VERSION} \
      wix_version=${WIX_VERSION} \
      cmake_version=${CMAKE_VERSION} \
      msys_version=${MSYS_VERSION} \
      system_python_version=${PYTHON_VERSION} \
      embedded_py2_version=${EMBEDDED_PYTHON_2_VERSION} \
      embedded_py3_version=${EMBEDDED_PYTHON_3_VERSION}

COPY ./windows/scripts scripts

# Add certificates needed for build & check certificates file hash
# We need to trust the DigiCert High Assurance EV Root CA certificate, which signs python.org,
# to be able to download some Python components during the Agent build.
RUN (New-Object System.Net.WebClient).DownloadFile(\"https://curl.haxx.se/ca/cacert.pem\", \"cacert.pem\") ; \
    if ((Get-FileHash .\cacert.pem).Hash -ne \"$ENV:CACERTS_HASH\") { Write-Host \"Wrong hashsum for cacert.pem: got '$((Get-FileHash .\cacert.pem).Hash)', expected '$ENV:CACERTS_HASH'.\"; exit 1 } ; \
    setx SSL_CERT_FILE \"C:\cacert.pem\"

# Set 32-bit flag env var
RUN setx WINDOWS_BUILD_32_BIT 1

# Install Chocolatey
RUN $env:chocolateyUseWindowsCompression = 'true'; Invoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))

# Install git
### HACK: we disable symbolic links when cloning repositories
### to work around a symlink-related failure in the agent-binaries omnibus project
### when copying the datadog-agent project twice.

RUN $env:chocolateyUseWindowsCompression = 'true'; cinst -y --no-progress git -x86 --version $ENV:GIT_VERSION
RUN git config --system core.symlinks false

# Install 7zip
RUN $env:chocolateyUseWindowsCompression = 'true'; cinst -y --no-progress 7zip -x86 --version $ENV:SEVENZIP_VERSION

# Install Cmake and update PATH to include it
RUN cinst -y --no-progress cmake -x86 --version $ENV:CMAKE_VERSION ; \
    [Environment]::SetEnvironmentVariable(\"Path\", [Environment]::GetEnvironmentVariable(\"Path\", [EnvironmentVariableTarget]::Machine) + \";${Env:ProgramFiles(x86)}\CMake\bin\", [System.EnvironmentVariableTarget]::Machine) ; \
    [Environment]::SetEnvironmentVariable(\"Path\", [Environment]::GetEnvironmentVariable(\"Path\", [EnvironmentVariableTarget]::Machine) + \";${env:ProgramFiles}\CMake\bin\", [System.EnvironmentVariableTarget]::Machine)

# Install golang and set GOPATH to the dev path used in builds & tests
RUN cinst -y --no-progress golang -x86 --version $ENV:GO_VERSION ; \
    setx GOPATH C:\dev\go

# Install system Python 2 (to use invoke)
RUN cinst -y --no-progress python2 -x86 --version $ENV:PYTHON_VERSION

# Install 64-bit ruby and bundler (for omnibus builds)
RUN cinst -y --no-progress ruby --version $ENV:RUBY_VERSION
RUN setx RIDK ((Get-Command ridk).Path) ; \
    gem install bundler

# Install msys2 system & install 64-bit C/C++ compilation toolchain
RUN cinst -y --no-progress msys2 --params \"/NoUpdate\" --version $ENV:MSYS_VERSION ; \
    ridk install 3

# (32-bit only) Install 32-bit C/C++ compilation toolchain
RUN ridk enable; bash -c \"pacman -S --needed --noconfirm mingw-w64-i686-binutils mingw-w64-i686-crt-git mingw-w64-i686-gcc mingw-w64-i686-gcc-libs mingw-w64-i686-headers-git mingw-w64-i686-libmangle-git mingw-w64-i686-libwinpthread-git mingw-w64-i686-make mingw-w64-i686-pkg-config mingw-w64-i686-tools-git mingw-w64-i686-winpthreads-git\" ; \
    [Environment]::SetEnvironmentVariable(\"Path\", [Environment]::GetEnvironmentVariable(\"Path\", [EnvironmentVariableTarget]::Machine) + \";C:\tools\msys64\mingw32\bin;C:\tools\msys64\usr\bin\", [System.EnvironmentVariableTarget]::Machine)

# Install aws cli
RUN powershell -C .\scripts\install_awscli.ps1

# Install docker, manifest-tool and notary
RUN powershell -Command .\scripts\install_docker.ps1

# Install embedded pythons (for unit testing)
RUN powershell -C .\scripts\install_embedded_pythons.ps1

### We need both the .NET 3.5 runtime and
### the .NET 4.8 runtime. To do this, on 1809 we get 4.8 from a base image and we
### manually the install .NET Framework 3.5 runtime using the instructions in
### the mcr.microsoft.com/dotnet/framework/runtime:3.5 Dockerfile:
### https://github.com/microsoft/dotnet-framework-docker/blob/26597e42d157cc1e09d1e0dc8f23c32e6c3d1467/3.5/runtime/windowsservercore-ltsc2019/Dockerfile

### 1909 includes .NET Framework 4.8 by default, so we use the image that includes
### .NET Framework 3.5 as well, and thus we don't need to install it manually here.

### The .NET Fx 3.5 is needed for the Visual C++ Compiler for Python 2.7
### (https://www.microsoft.com/en-us/download/details.aspx?id=44266)
### and to work around a bug in the WiX 3.11 installer
### (https://github.com/wixtoolset/issues/issues/5661).

# Install .NET Fx 3.5
RUN if ($Env:WINDOWS_VERSION -eq '1809') { .\scripts\install_net35_1809.bat }

# Install VS2017
RUN cinst -y --no-progress visualstudio2017buildtools -x86 --version $ENV:VS2017BUILDTOOLS_VERSION --params \"--add Microsoft.VisualStudio.ComponentGroup.NativeDesktop.Win81 --add Microsoft.VisualStudio.Workload.VCTools\" ; \
    setx VSTUDIO_ROOT \"${env:ProgramFiles(x86)}\Microsoft Visual Studio\2017\BuildTools\" ; \
    [Environment]::SetEnvironmentVariable(\"Path\", [Environment]::GetEnvironmentVariable(\"Path\", [EnvironmentVariableTarget]::Machine) + \";${env:ProgramFiles(x86)}\Windows Kits\8.1\bin\x64\", [System.EnvironmentVariableTarget]::Machine)

# Install VC compiler for Python 2.7
RUN cinst -y --no-progress vcpython27 -x86 --version $ENV:VCPYTHON27_VERSION

# Install Wix and update PATH to include it
RUN cinst -y --no-progress wixtoolset -x86 --version $ENV:WIX_VERSION ; \
    [Environment]::SetEnvironmentVariable(\"Path\", [Environment]::GetEnvironmentVariable(\"Path\", [EnvironmentVariableTarget]::Machine) + \";${env:ProgramFiles(x86)}\WiX Toolset v3.11\bin\", [System.EnvironmentVariableTarget]::Machine)

ENTRYPOINT ["scripts/entrypoint.bat"]
